"use strict";
var express = require('express');
var app = express();
var mongoose = require('mongoose');
var methodOverride = require('method-override');
var express = require('express');
var passport = require('passport');
var flash = require('connect-flash');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var Nerd = require('./models/Nerd');
var User = require('./models/User');
mongoose.connect('mongodb://127.0.0.1:27017/');
app.use(morgan('dev'));
app.use(cookieParser());
app.use(session({secret: process.env.SESSION_SECRET || 'detteerenlitenhemmelighetsombarejegvet'}));
app.use(passport.initialize());
app.use(passport.session());
app.use(flash());
var port = process.env.PORT || 8080;
app.use(bodyParser.json());
app.use(bodyParser.json({type: 'application/vnd.api+json'}));
app.use(bodyParser.urlencoded({extended: true}));
app.use(methodOverride('X-HTTP-Method-Override'));
app.use(express.static(__dirname + '/public'));
require('./auth')(passport, User);
require('./routes')(app, express, Nerd, User, passport);
app.listen(port);
console.log('Magic happens on port ' + port);
exports = module.exports = app;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhY2tlbmQvc2VydmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0FBQUEsQUFBSSxFQUFBLENBQUEsT0FBTSxFQUFXLENBQUEsT0FBTSxBQUFDLENBQUMsU0FBUSxDQUFDLENBQUM7QUFDdkMsQUFBSSxFQUFBLENBQUEsR0FBRSxFQUFlLENBQUEsT0FBTSxBQUFDLEVBQUMsQ0FBQztBQUM5QixBQUFJLEVBQUEsQ0FBQSxRQUFPLEVBQVUsQ0FBQSxPQUFNLEFBQUMsQ0FBQyxVQUFTLENBQUMsQ0FBQztBQUN4QyxBQUFJLEVBQUEsQ0FBQSxjQUFhLEVBQUksQ0FBQSxPQUFNLEFBQUMsQ0FBQyxpQkFBZ0IsQ0FBQyxDQUFDO0FBQy9DLEFBQUksRUFBQSxDQUFBLE9BQU0sRUFBVyxDQUFBLE9BQU0sQUFBQyxDQUFDLFNBQVEsQ0FBQyxDQUFDO0FBQ3ZDLEFBQUksRUFBQSxDQUFBLFFBQU8sRUFBVSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxDQUFDO0FBQ3hDLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBWSxDQUFBLE9BQU0sQUFBQyxDQUFDLGVBQWMsQ0FBQyxDQUFDO0FBQzVDLEFBQUksRUFBQSxDQUFBLE1BQUssRUFBWSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBR3RDLEFBQUksRUFBQSxDQUFBLFVBQVMsRUFBUSxDQUFBLE9BQU0sQUFBQyxDQUFDLGFBQVksQ0FBQyxDQUFDO0FBQzNDLEFBQUksRUFBQSxDQUFBLFlBQVcsRUFBTSxDQUFBLE9BQU0sQUFBQyxDQUFDLGVBQWMsQ0FBQyxDQUFDO0FBQzdDLEFBQUksRUFBQSxDQUFBLE9BQU0sRUFBVyxDQUFBLE9BQU0sQUFBQyxDQUFDLGlCQUFnQixDQUFDLENBQUM7QUFFL0MsQUFBSSxFQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZUFBYyxDQUFDLENBQUM7QUFDbkMsQUFBSSxFQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsT0FBTSxBQUFDLENBQUMsZUFBYyxDQUFDLENBQUM7QUFNbkMsT0FBTyxRQUFRLEFBQUMsQ0FBQyw0QkFBMkIsQ0FBQyxDQUFDO0FBRzlDLEVBQUUsSUFBSSxBQUFDLENBQUMsTUFBSyxBQUFDLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQztBQUN0QixFQUFFLElBQUksQUFBQyxDQUFDLFlBQVcsQUFBQyxFQUFDLENBQUMsQ0FBQztBQUl2QixFQUFFLElBQUksQUFBQyxDQUFDLE9BQU0sQUFBQyxDQUFDLENBQUUsTUFBSyxDQUFHLENBQUEsT0FBTSxJQUFJLGVBQWUsR0FBSyx5Q0FBdUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQUNwRyxFQUFFLElBQUksQUFBQyxDQUFDLFFBQU8sV0FBVyxBQUFDLEVBQUMsQ0FBQyxDQUFDO0FBQzlCLEVBQUUsSUFBSSxBQUFDLENBQUMsUUFBTyxRQUFRLEFBQUMsRUFBQyxDQUFDLENBQUM7QUFDM0IsRUFBRSxJQUFJLEFBQUMsQ0FBQyxLQUFJLEFBQUMsRUFBQyxDQUFDLENBQUM7QUFFaEIsQUFBSSxFQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsT0FBTSxJQUFJLEtBQUssR0FBSyxLQUFHLENBQUM7QUFHbkMsRUFBRSxJQUFJLEFBQUMsQ0FBQyxVQUFTLEtBQUssQUFBQyxFQUFDLENBQUMsQ0FBQztBQUMxQixFQUFFLElBQUksQUFBQyxDQUFDLFVBQVMsS0FBSyxBQUFDLENBQUMsQ0FBRSxJQUFHLENBQUcsMkJBQXlCLENBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUQsRUFBRSxJQUFJLEFBQUMsQ0FBQyxVQUFTLFdBQVcsQUFBQyxDQUFDLENBQUUsUUFBTyxDQUFHLEtBQUcsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQUVsRCxFQUFFLElBQUksQUFBQyxDQUFDLGNBQWEsQUFBQyxDQUFDLHdCQUF1QixDQUFDLENBQUMsQ0FBQztBQUNqRCxFQUFFLElBQUksQUFBQyxDQUFDLE9BQU0sT0FBTyxBQUFDLENBQUMsU0FBUSxFQUFJLFVBQVEsQ0FBQyxDQUFDLENBQUM7QUFHOUMsTUFBTSxBQUFDLENBQUMsUUFBTyxDQUFDLEFBQUMsQ0FBQyxRQUFPLENBQUcsS0FBRyxDQUFDLENBQUM7QUFJakMsTUFBTSxBQUFDLENBQUMsVUFBUyxDQUFDLEFBQUMsQ0FBQyxHQUFFLENBQUcsUUFBTSxDQUFHLEtBQUcsQ0FBRyxLQUFHLENBQUcsU0FBTyxDQUFDLENBQUM7QUFHdkQsRUFBRSxPQUFPLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUNoQixNQUFNLElBQUksQUFBQyxDQUFDLHdCQUF1QixFQUFJLEtBQUcsQ0FBQyxDQUFDO0FBQzVDLE1BQU0sRUFBSSxDQUFBLE1BQUssUUFBUSxFQUFJLElBQUUsQ0FBQztBQUFvQiIsImZpbGUiOiJiYWNrZW5kL3NlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXNDb250ZW50IjpbIi8vIG1vZHVsZXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxudmFyIGV4cHJlc3MgICAgICAgID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIGFwcCAgICAgICAgICAgID0gZXhwcmVzcygpO1xudmFyIG1vbmdvb3NlICAgICAgID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbnZhciBtZXRob2RPdmVycmlkZSA9IHJlcXVpcmUoJ21ldGhvZC1vdmVycmlkZScpO1xudmFyIGV4cHJlc3MgICAgICAgID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIHBhc3Nwb3J0ICAgICAgID0gcmVxdWlyZSgncGFzc3BvcnQnKTtcbnZhciBmbGFzaCBcdCAgICAgICA9IHJlcXVpcmUoJ2Nvbm5lY3QtZmxhc2gnKTtcbnZhciBtb3JnYW4gICAgICAgICA9IHJlcXVpcmUoJ21vcmdhbicpO1xuXG4vLyByZXF1aXJlZCBmb3IgcGFzc3BvcnRcbnZhciBib2R5UGFyc2VyICAgICA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG52YXIgY29va2llUGFyc2VyICAgPSByZXF1aXJlKCdjb29raWUtcGFyc2VyJyk7XG52YXIgc2Vzc2lvbiAgICAgICAgPSByZXF1aXJlKCdleHByZXNzLXNlc3Npb24nKTtcblxudmFyIE5lcmQgPSByZXF1aXJlKCcuL21vZGVscy9OZXJkJyk7XG52YXIgVXNlciA9IHJlcXVpcmUoJy4vbW9kZWxzL1VzZXInKTtcblxuXG4vLyBjb25maWd1cmF0aW9uID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0XG4vLyBjb25maWcgZmlsZXNcbm1vbmdvb3NlLmNvbm5lY3QoJ21vbmdvZGI6Ly8xMjcuMC4wLjE6MjcwMTcvJyk7XG5cbi8vIHNldCB1cCBvdXIgZXhwcmVzcyBhcHBsaWNhdGlvblxuYXBwLnVzZShtb3JnYW4oJ2RldicpKTsgLy8gbG9nIGV2ZXJ5IHJlcXVlc3QgdG8gdGhlIGNvbnNvbGVcbmFwcC51c2UoY29va2llUGFyc2VyKCkpOyAvLyByZWFkIGNvb2tpZXMgKG5lZWRlZCBmb3IgYXV0aClcblxuXG4vLyByZXF1aXJlZCBmb3IgcGFzc3BvcnQsIGFuZFxuYXBwLnVzZShzZXNzaW9uKHsgc2VjcmV0OiBwcm9jZXNzLmVudi5TRVNTSU9OX1NFQ1JFVCB8fCAnZGV0dGVlcmVubGl0ZW5oZW1tZWxpZ2hldHNvbWJhcmVqZWd2ZXQnIH0pKTsgLy8gc2Vzc2lvbiBzZWNyZXRcbmFwcC51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcbmFwcC51c2UocGFzc3BvcnQuc2Vzc2lvbigpKTsgLy8gcGVyc2lzdGVudCBsb2dpbiBzZXNzaW9uc1xuYXBwLnVzZShmbGFzaCgpKTsgLy8gdXNlIGNvbm5lY3QtZmxhc2ggZm9yIGZsYXNoIG1lc3NhZ2VzIHN0b3JlZCBpbiBzZXNzaW9uXG5cbnZhciBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwOyAvLyBzZXQgb3VyIHBvcnRcblxuLy8gZ2V0IGFsbCBkYXRhL3N0dWZmIG9mIHRoZSBib2R5IChQT1NUKSBwYXJhbWV0ZXJzXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTsgLy8gcGFyc2UgYXBwbGljYXRpb24vanNvbiBcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKHsgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5hcGkranNvbicgfSkpOyAvLyBwYXJzZSBhcHBsaWNhdGlvbi92bmQuYXBpK2pzb24gYXMganNvblxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7IC8vIHBhcnNlIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxuXG5hcHAudXNlKG1ldGhvZE92ZXJyaWRlKCdYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJykpOyAvLyBvdmVycmlkZSB3aXRoIHRoZSBYLUhUVFAtTWV0aG9kLU92ZXJyaWRlIGhlYWRlciBpbiB0aGUgcmVxdWVzdC4gc2ltdWxhdGUgREVMRVRFL1BVVFxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhfX2Rpcm5hbWUgKyAnL3B1YmxpYycpKTsgLy8gc2V0IHRoZSBzdGF0aWMgZmlsZXMgbG9jYXRpb24gL3B1YmxpYy9pbWcgd2lsbCBiZSAvaW1nIGZvciB1c2Vyc1xuXG4vLyBwYXNzcG9ydFNldHRpbmdzXG5yZXF1aXJlKCcuL2F1dGgnKShwYXNzcG9ydCwgVXNlcik7XG5cbi8vIHJvdXRlcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy9yZXF1aXJlKCcuL2FwcC9yb3V0ZXMnKShhcHApOyAvLyBwYXNzIG91ciBhcHBsaWNhdGlvbiBpbnRvIG91ciByb3V0ZXNcbnJlcXVpcmUoJy4vcm91dGVzJykoYXBwLCBleHByZXNzLCBOZXJkLCBVc2VyLCBwYXNzcG9ydCk7XG5cbi8vIHN0YXJ0IGFwcCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYXBwLmxpc3Rlbihwb3J0KTtcdFxuY29uc29sZS5sb2coJ01hZ2ljIGhhcHBlbnMgb24gcG9ydCAnICsgcG9ydCk7IFx0XHRcdC8vIHNob3V0b3V0IHRvIHRoZSB1c2VyXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBhcHA7IFx0XHRcdFx0XHRcdC8vIGV4cG9zZSBhcHAiXX0=