"use strict";
var LocalStrategy = require('passport-local').Strategy;
exports = module.exports = function(passport, User) {
  passport.use('local-login', new LocalStrategy({
    usernameField: 'email',
    passwordField: 'password'
  }, function(username, password, done) {
    User.findOne({email: username}, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, null);
      }
      if (user.validPassword(password)) {
        return done(null, user);
      }
      done(null, null);
    });
  }));
  passport.serializeUser(function(user, done) {
    done(null, user.email);
  });
  passport.deserializeUser(function(user, done) {
    User.findOne({'email': user.email}, function(err, user) {
      if (err)
        return done(err);
      done(null, {
        id: user.id,
        email: user.email,
        password: user.password
      });
    });
  });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhY2tlbmQvYXV0aC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLEFBQUksRUFBQSxDQUFBLGFBQVksRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGdCQUFlLENBQUMsU0FBUyxDQUFDO0FBRXRELE1BQU0sRUFBSSxDQUFBLE1BQUssUUFBUSxFQUFJLFVBQVUsUUFBTyxDQUFHLENBQUEsSUFBRyxDQUFHO0FBd0JqRCxTQUFPLElBQUksQUFBQyxDQUFDLGFBQVksQ0FBRyxJQUFJLGNBQVksQUFBQyxDQUFDO0FBQzFDLGdCQUFZLENBQUcsUUFBTTtBQUNyQixnQkFBWSxDQUFHLFdBQVM7QUFBQSxFQUM1QixDQUFHLFVBQVMsUUFBTyxDQUFHLENBQUEsUUFBTyxDQUFHLENBQUEsSUFBRyxDQUFHO0FBQ2xDLE9BQUcsUUFBUSxBQUFDLENBQUMsQ0FBRSxLQUFJLENBQUcsU0FBTyxDQUFFLENBQUcsVUFBUyxHQUFFLENBQUcsQ0FBQSxJQUFHLENBQUc7QUFDbEQsU0FBSSxHQUFFLENBQUc7QUFDTCxhQUFPLENBQUEsSUFBRyxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7TUFDcEI7QUFBQSxBQUVBLFNBQUcsQ0FBQyxJQUFHLENBQUc7QUFDTixhQUFPLENBQUEsSUFBRyxBQUFDLENBQUMsSUFBRyxDQUFHLEtBQUcsQ0FBQyxDQUFDO01BQzNCO0FBQUEsQUFFQSxTQUFJLElBQUcsY0FBYyxBQUFDLENBQUMsUUFBTyxDQUFDLENBQUc7QUFDOUIsYUFBTyxDQUFBLElBQUcsQUFBQyxDQUFDLElBQUcsQ0FBRyxLQUFHLENBQUMsQ0FBQztNQUMzQjtBQUFBLEFBRUEsU0FBRyxBQUFDLENBQUMsSUFBRyxDQUFHLEtBQUcsQ0FBQyxDQUFBO0lBQ25CLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBTyxjQUFjLEFBQUMsQ0FBQyxTQUFVLElBQUcsQ0FBRyxDQUFBLElBQUcsQ0FBRztBQUN6QyxPQUFHLEFBQUMsQ0FBQyxJQUFHLENBQUcsQ0FBQSxJQUFHLE1BQU0sQ0FBQyxDQUFDO0VBQzFCLENBQUMsQ0FBQztBQUVGLFNBQU8sZ0JBQWdCLEFBQUMsQ0FBQyxTQUFVLElBQUcsQ0FBRyxDQUFBLElBQUcsQ0FBRztBQUMzQyxPQUFHLFFBQVEsQUFBQyxDQUFDLENBQUUsT0FBTSxDQUFLLENBQUEsSUFBRyxNQUFNLENBQUUsQ0FBRyxVQUFVLEdBQUUsQ0FBRyxDQUFBLElBQUcsQ0FBRztBQUN6RCxTQUFJLEdBQUU7QUFBRyxhQUFPLENBQUEsSUFBRyxBQUFDLENBQUMsR0FBRSxDQUFDLENBQUM7QUFBQSxBQUV6QixTQUFHLEFBQUMsQ0FBQyxJQUFHLENBQUc7QUFBRSxTQUFDLENBQUcsQ0FBQSxJQUFHLEdBQUc7QUFBRyxZQUFJLENBQUcsQ0FBQSxJQUFHLE1BQU07QUFBRyxlQUFPLENBQUcsQ0FBQSxJQUFHLFNBQVM7QUFBQSxNQUFFLENBQUMsQ0FBQTtJQUMxRSxDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7QUFzQk4sQ0FBQztBQUFBIiwiZmlsZSI6ImJhY2tlbmQvYXV0aC9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiIsInNvdXJjZXNDb250ZW50IjpbInZhciBMb2NhbFN0cmF0ZWd5ID0gcmVxdWlyZSgncGFzc3BvcnQtbG9jYWwnKS5TdHJhdGVneTtcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3Nwb3J0LCBVc2VyKSB7XG5cbi8qICAgIHBhc3Nwb3J0LnVzZSgnbG9jYWwtc2lnbnVwJywgbmV3IExvY2FsU3RyYXRlZ3koe1xuICAgICAgICB1c2VybmFtZUZpZWxkOiAnZW1haWwnLCAvLyBieSBkZWZhdWx0LCBsb2NhbCBzdHJhdGVneSB1c2VzIHVzZXJuYW1lIGFuZCBwYXNzd29yZCwgd2Ugd2lsbCBvdmVycmlkZSB3aXRoIGVtYWlsXG4gICAgICAgIHBhc3N3b3JkRmllbGQ6ICdwYXNzd29yZCdcbiAgICB9LCBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQsIGRvbmUpIHtcbiAgICAgICAgVXNlci5maW5kT25lKHsgJ2VtYWlsJyA6ICBlbWFpbCB9LCBmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgaWYgKHVzZXIpIHJldHVybiBkb25lKG51bGwsIGZhbHNlLCByZXEuZmxhc2goJ3NpZ251cE1lc3NhZ2UnLCAnVGhpcyBlbWFpbCBpcyBhbHJlYWR5IGluIHVzZS4nKSk7XG5cbiAgICAgICAgICAgIHZhciBuZXdVc2VyID0gbmV3IFVzZXIoKTtcblxuICAgICAgICAgICAgbmV3VXNlci5lbWFpbCA9IGVtYWlsO1xuICAgICAgICAgICAgbmV3VXNlci5wYXNzd29yZCA9IG5ld1VzZXIuZ2VuZXJhdGVIYXNoKHBhc3N3b3JkKTtcblxuICAgICAgICAgICAgbmV3VXNlci5zYXZlKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgbmV3VXNlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSkpOyovXG5cbiAgICBwYXNzcG9ydC51c2UoJ2xvY2FsLWxvZ2luJywgbmV3IExvY2FsU3RyYXRlZ3koe1xuICAgICAgICB1c2VybmFtZUZpZWxkOiAnZW1haWwnLCAvLyBieSBkZWZhdWx0LCBsb2NhbCBzdHJhdGVneSB1c2VzIHVzZXJuYW1lIGFuZCBwYXNzd29yZCwgd2Ugd2lsbCBvdmVycmlkZSB3aXRoIGVtYWlsXG4gICAgICAgIHBhc3N3b3JkRmllbGQ6ICdwYXNzd29yZCdcbiAgICB9LCBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQsIGRvbmUpIHtcbiAgICAgICAgVXNlci5maW5kT25lKHsgZW1haWw6IHVzZXJuYW1lIH0sIGZ1bmN0aW9uKGVyciwgdXNlcikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb25lKGVycik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCF1c2VyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUobnVsbCwgbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1c2VyLnZhbGlkUGFzc3dvcmQocGFzc3dvcmQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUobnVsbCwgdXNlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvbmUobnVsbCwgbnVsbClcbiAgICAgICAgfSk7XG4gICAgfSkpO1xuXG4gICAgcGFzc3BvcnQuc2VyaWFsaXplVXNlcihmdW5jdGlvbiAodXNlciwgZG9uZSkge1xuICAgICAgICBkb25lKG51bGwsIHVzZXIuZW1haWwpO1xuICAgIH0pO1xuXG4gICAgcGFzc3BvcnQuZGVzZXJpYWxpemVVc2VyKGZ1bmN0aW9uICh1c2VyLCBkb25lKSB7XG4gICAgICAgIFVzZXIuZmluZE9uZSh7ICdlbWFpbCcgOiAgdXNlci5lbWFpbCB9LCBmdW5jdGlvbiAoZXJyLCB1c2VyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpO1xuXG4gICAgICAgICAgICBkb25lKG51bGwsIHsgaWQ6IHVzZXIuaWQsIGVtYWlsOiB1c2VyLmVtYWlsLCBwYXNzd29yZDogdXNlci5wYXNzd29yZCB9KVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuLyogICAgcGFzc3BvcnQudXNlKG5ldyBGYWNlYm9va1N0cmF0ZWd5KHtcbiAgICAgICAgY2xpZW50SUQ6IGNvbmZpZy5nZXQoJ2ZhY2Vib29rLmNsaWVudC5pZCcpLFxuICAgICAgICBjbGllbnRTZWNyZXQ6IGNvbmZpZy5nZXQoJ2ZhY2Vib29rLmNsaWVudC5zZWNyZXQnKSxcbiAgICAgICAgY2FsbGJhY2tVUkw6IGNvbmZpZy5nZXQoJ2ZhY2Vib29rLmNhbGxiYWNrLnVybCcpLFxuICAgICAgICBwYXNzUmVxVG9DYWxsYmFjayA6IHRydWVcbiAgICB9LCBhdXRoZW50aWNhdGlvbi5mYWNlYm9vay5hdXRoKSk7XG5cbiAgICBwYXNzcG9ydC51c2UobmV3IEdvb2dsZVN0cmF0ZWd5KHtcbiAgICAgICAgY2xpZW50SUQ6IGNvbmZpZy5nZXQoJ2dvb2dsZS5jbGllbnQuaWQnKSxcbiAgICAgICAgY2xpZW50U2VjcmV0OiBjb25maWcuZ2V0KCdnb29nbGUuY2xpZW50LnNlY3JldCcpLFxuICAgICAgICBjYWxsYmFja1VSTDogY29uZmlnLmdldCgnZ29vZ2xlLmNhbGxiYWNrLnVybCcpLFxuICAgICAgICBwYXNzUmVxVG9DYWxsYmFjayA6IHRydWVcbiAgICB9LCBhdXRoZW50aWNhdGlvbi5nb29nbGUuYXV0aCkpO1xuXG4gICAgcGFzc3BvcnQudXNlKG5ldyBJbnN0YWdyYW1TdHJhdGVneSh7XG4gICAgICAgIGNsaWVudElEOiBjb25maWcuZ2V0KCdpbnN0YWdyYW0uY2xpZW50LmlkJyksXG4gICAgICAgIGNsaWVudFNlY3JldDogY29uZmlnLmdldCgnaW5zdGFncmFtLmNsaWVudC5zZWNyZXQnKSxcbiAgICAgICAgY2FsbGJhY2tVUkw6IGNvbmZpZy5nZXQoJ2luc3RhZ3JhbS5jYWxsYmFjay51cmwnKSxcbiAgICAgICAgcGFzc1JlcVRvQ2FsbGJhY2sgOiB0cnVlXG4gICAgfSwgYXV0aGVudGljYXRpb24uaW5zdGFncmFtLmF1dGgpKTsqL1xufTsiXX0=